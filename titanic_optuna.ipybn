{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "KPgE59sZWEcu"
   },
   "source": [
    "# An introduction to Optuna for optimising machine learning models\n",
    "\n",
    "This Jupyter notebook goes through the basic usage of Optuna (optuna.org). Optuna is a machine learning model optimizer that may be used on any machine learning model type. Optuna uses heuristic (searching) algorithms to find the best model hyperparameters.\n",
    "\n",
    "To install optuna (if not installed as part of the Titanic environment': `pip install optuna`. The visualisations require plotly (`pip install poltly`)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "7HHP8F10WEcz"
   },
   "outputs": [],
   "source": [
    "import optuna\n",
    "import pandas as pd\n",
    "\n",
    "import sklearn.ensemble\n",
    "import sklearn.model_selection\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "from IPython.display import clear_output\n",
    "\n",
    "# The following are needed only to show Optuna images in a Jupyter Book\n",
    "from IPython.display import Image, display\n",
    "\n",
    "# To save images you will need to `pip install kaleido`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Optimize a simple problem\n",
    "\n",
    "Find *x* that minmises *(x-2)^2*\n",
    "\n",
    "(*x*=2 minimises output)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def objective(trial):\n",
    "    # Set study paramter to vary\n",
    "    x = trial.suggest_float('x', -10, 10)\n",
    "    \n",
    "    # Return value for optimisation\n",
    "    return (x - 2) ** 2\n",
    "\n",
    "study = optuna.create_study()\n",
    "study.optimize(objective, n_trials=100)\n",
    "\n",
    "# To remove optimisation output after complete\n",
    "clear_output(wait=True)\n",
    "\n",
    "# Run optimisation (default is to minimise objective)\n",
    "study.best_params  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Download Titanic data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "download_required = True\n",
    "\n",
    "if download_required:\n",
    "    \n",
    "    # Download processed data:\n",
    "    address = 'https://raw.githubusercontent.com/MichaelAllen1966/' + \\\n",
    "                '1804_python_healthcare/master/titanic/data/processed_data.csv'\n",
    "    \n",
    "    data = pd.read_csv(address)\n",
    "\n",
    "    # Create a data subfolder if one does not already exist\n",
    "    import os\n",
    "    data_directory ='./data/'\n",
    "    if not os.path.exists(data_directory):\n",
    "        os.makedirs(data_directory)\n",
    "\n",
    "    # Save data\n",
    "    data.to_csv(data_directory + 'processed_data.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv('data/processed_data.csv')\n",
    "# Make all data 'float' type\n",
    "data = data.astype(float)\n",
    "\n",
    "# Drop Passengerid (axis=1 indicates we are removing a column rather than a row)\n",
    "data.drop('PassengerId', inplace=True, axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Divide into X (features) and y (labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Split data into two DataFrames\n",
    "X_df = data.drop('Survived',axis=1)\n",
    "y_df = data['Survived']\n",
    "\n",
    "# Convert DataFrames to NumPy arrays\n",
    "X = X_df.values\n",
    "y = y_df.values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "lewylM9EWEc0"
   },
   "source": [
    "## Optimize Hyperparameters\n",
    "\n",
    "### Define a simple scikit-learn model\n",
    "\n",
    "We start with a simple random forest model to classify Titanic survivors vs. non-survivors. We define a function called `objective` that encapsulates the whole training process and outputs the accuracy of the model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "8yCLMzC2WEc0"
   },
   "outputs": [],
   "source": [
    "def objective():\n",
    "\n",
    "    # Define model\n",
    "    clf = sklearn.ensemble.RandomForestClassifier(    \n",
    "        n_estimators=5, max_depth=3)\n",
    "    \n",
    "    # Assess accuracy with sklearn.model_selection.cross_val_score\n",
    "    accuracy = sklearn.model_selection.cross_val_score(\n",
    "        clf, X, y, n_jobs=-1, cv=3).mean()\n",
    "    \n",
    "    return accuracy \n",
    "\n",
    "clear_output(wait=True)\n",
    "print(f'Accuracy: {objective():0.3f}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "-RpayzqeWEc1"
   },
   "source": [
    "### Optimize hyperparameters of the model\n",
    "\n",
    "The hyperparameters of the above algorithm are `n_estimators` and `max_depth` for which we can try different values to see if the model accuracy can be improved. The `objective` function is modified to accept a trial object. This trial has several methods for sampling hyperparameters. We create a study to run the hyperparameter optimization and finally read the best hyperparameters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "TGCV8SiNWEc2"
   },
   "outputs": [],
   "source": [
    "def objective(trial):\n",
    "    \n",
    "    # Set Optuna trial parameters and ranges\n",
    "    n_estimators = trial.suggest_int('n_estimators', 2, 20)\n",
    "    max_depth = int(trial.suggest_float('max_depth', 1, 32, log=True))\n",
    "    \n",
    "    # Set up model\n",
    "    clf = sklearn.ensemble.RandomForestClassifier(\n",
    "        n_estimators=n_estimators, max_depth=max_depth)\n",
    "    \n",
    "    # Assess accuracy with sklearn.model_selection.cross_val_score\n",
    "    accuracy = sklearn.model_selection.cross_val_score(\n",
    "        clf, X, y, n_jobs=-1, cv=3).mean()\n",
    "    \n",
    "    return accuracy\n",
    "\n",
    "# Set up Optuna study\n",
    "study = optuna.create_study(direction='maximize')\n",
    "\n",
    "# Run optimisation\n",
    "study.optimize(objective, n_trials=100)\n",
    "\n",
    "# Get best model run\n",
    "trial = study.best_trial\n",
    "\n",
    "# Clear optimisation output and display output\n",
    "clear_output(wait=True)\n",
    "print(f'Accuracy: {trial.value:0.3f}')\n",
    "print(f'Best hyperparameters: {trial.params}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "45EJ8ulhWEc2"
   },
   "source": [
    "It is possible to condition hyperparameters using Python if statements. We can for instance include another classifier, a logistic regression classifier, in our hyperparameter optimsation and define hyperparameters specific to the random forest model and the logistic regression models."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "_B4NmeUDWEc3"
   },
   "outputs": [],
   "source": [
    "def objective(trial):\n",
    "    \n",
    "    # All Optuna to choose classifier (Random Forest or Support Vector Macgine)\n",
    "    classifier = trial.suggest_categorical(\n",
    "        'classifier', ['RandomForest', 'LogisticRegression'])\n",
    "    \n",
    "    # If Random Forest set Optuna trial parameters for random forest\n",
    "    if classifier == 'RandomForest':\n",
    "        n_estimators = trial.suggest_int('n_estimators', 2, 20)\n",
    "        max_depth = int(trial.suggest_float('max_depth', 1, 32, log=True))\n",
    "\n",
    "        # Set up model\n",
    "        clf = sklearn.ensemble.RandomForestClassifier(\n",
    "            n_estimators=n_estimators, max_depth=max_depth)\n",
    "    \n",
    "    # Otherwsie set Optuna trial parameters for logistic regression\n",
    "    else:\n",
    "        c = trial.suggest_float('lr_c', 1e-10, 1e10, log=True)\n",
    "        \n",
    "        # Set up model\n",
    "        clf = LogisticRegression(C=c)\n",
    "        \n",
    "    # Run selected model        \n",
    "    accuracy = sklearn.model_selection.cross_val_score(\n",
    "        clf, X, y, n_jobs=-1, cv=3).mean()\n",
    "\n",
    "    return accuracy\n",
    "\n",
    "# Set up Optuna study\n",
    "study = optuna.create_study(direction='maximize')\n",
    "\n",
    "# Run optimisation\n",
    "study.optimize(objective, n_trials=100)\n",
    "\n",
    "# Get best model run\n",
    "trial = study.best_trial\n",
    "\n",
    "# Clear optimisation output and display output\n",
    "clear_output(wait=True)\n",
    "print(f'Accuracy: {trial.value:0.3f}')\n",
    "print(f'Best hyperparameters: {trial.params}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "nwN4PKChWEc3"
   },
   "source": [
    "### Plotting the study\n",
    "\n",
    "Plotting the optimization history of the study."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "EvMRI1YBWEc4"
   },
   "outputs": [],
   "source": [
    "fig = optuna.visualization.plot_optimization_history(study)\n",
    "\n",
    "# To display fig in an orinary norebook use `fig.show`\n",
    "\n",
    "# The following is needed only to display the image in an online Jupyter Book\n",
    "filename = './images/temp.jpg'\n",
    "fig.write_image(filename)\n",
    "display(Image(filename))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "LGgd8xe4WEc4"
   },
   "source": [
    "Plotting the accuracies for each hyperparameter for each trial."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "AyCHT7cFWEc4"
   },
   "outputs": [],
   "source": [
    "fig = optuna.visualization.plot_slice(study)\n",
    "\n",
    "# To display fig in an orinary norebook use `fig.show`\n",
    "\n",
    "# The following is needed only to display the image in an online Jupyter Book\n",
    "filename = './images/temp.jpg'\n",
    "fig.write_image(filename)\n",
    "display(Image(filename))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "HOFmjlbqWEc5"
   },
   "source": [
    "Plotting the accuracy surface for the hyperparameters involved in the random forest model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "EVYwPI-dWEc5"
   },
   "outputs": [],
   "source": [
    "fig = optuna.visualization.plot_contour(study, params=['n_estimators', 'max_depth'])\n",
    "\n",
    "# To display fig in an orinary norebook use `fig.show`\n",
    "\n",
    "# The following is needed only to display the image in an online Jupyter Book\n",
    "filename = './images/temp.jpg'\n",
    "fig.write_image(filename)\n",
    "display(Image(filename))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Switching sampling Algorithms\n",
    "\n",
    "Samplers continually narrow down the search space using the records of suggested parameter values and evaluated objective values,\n",
    "leading to an optimal search space which giving off parameters leading to better objective values.\n",
    "More detailed explanation of how samplers suggest parameters is in :class:`optuna.samplers.BaseSampler`.\n",
    "\n",
    "Optuna provides the following sampling algorithms:\n",
    "\n",
    "- Tree-structured Parzen Estimator algorithm implemented in :class:`optuna.samplers.TPESampler`\n",
    "\n",
    "- CMA-ES (Covariance matrix adaptation evolution strategy) based algorithm implemented in :class:`optuna.samplers.CmaEsSampler`\n",
    "\n",
    "- Grid Search implemented in :class:`optuna.samplers.GridSampler`\n",
    "\n",
    "- Random Search implemented in :class:`optuna.samplers.RandomSampler`\n",
    "\n",
    "The default sampler is :class:`optuna.samplers.TPESampler`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can define an alternative sampler when we define the study. Here we use a CMA-ES sampler."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def objective(trial):\n",
    "\n",
    "    # Set Optuna trial parameters and ranges\n",
    "    n_estimators = trial.suggest_int('n_estimators', 2, 20)\n",
    "    max_depth = int(trial.suggest_float('max_depth', 1, 32, log=True))\n",
    "    \n",
    "    # Set up model\n",
    "    clf = sklearn.ensemble.RandomForestClassifier(\n",
    "        n_estimators=n_estimators, max_depth=max_depth)\n",
    "    \n",
    "    # Assess accuracy with sklearn.model_selection.cross_val_score\n",
    "    accuracy = sklearn.model_selection.cross_val_score(\n",
    "        clf, X, y, n_jobs=-1, cv=3).mean()\n",
    "    \n",
    "    return accuracy\n",
    "\n",
    "# Set up Optuna study\n",
    "\n",
    "study = optuna.create_study(direction='maximize', \n",
    "                            sampler=optuna.samplers.CmaEsSampler())\n",
    "\n",
    "# Run optimisation\n",
    "study.optimize(objective, n_trials=100)\n",
    "\n",
    "# Get best model run\n",
    "trial = study.best_trial\n",
    "\n",
    "# Clear optimisation output and display output\n",
    "clear_output(wait=True)\n",
    "print(f'Accuracy: {trial.value:0.3f}')\n",
    "print(f'Best hyperparameters: {trial.params}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig = optuna.visualization.plot_optimization_history(study)\n",
    "\n",
    "# To display fig in an orinary norebook use `fig.show`\n",
    "\n",
    "# The following is needed only to display the image in an online Jupyter Book\n",
    "filename = './images/temp.jpg'\n",
    "fig.write_image(filename)\n",
    "display(Image(filename))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig = optuna.visualization.plot_contour(study, params=['n_estimators', 'max_depth'])\n",
    "\n",
    "# To display fig in an orinary norebook use `fig.show`\n",
    "\n",
    "# The following is needed only to display the image in an online Jupyter Book\n",
    "filename = './images/temp.jpg'\n",
    "fig.write_image(filename)\n",
    "display(Image(filename))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Grid search\n",
    "\n",
    "With grid search, the defined search space over-rides the trial suggestions in the objective."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def objective(trial):\n",
    "\n",
    "    # Set Optuna trial parameters and ranges\n",
    "    n_estimators = trial.suggest_int('n_estimators', 2, 20)\n",
    "    max_depth = int(trial.suggest_float('max_depth', 1, 32, log=True))\n",
    "    \n",
    "    # Set up model\n",
    "    clf = sklearn.ensemble.RandomForestClassifier(\n",
    "        n_estimators=n_estimators, max_depth=max_depth)\n",
    "    \n",
    "    # Assess accuracy with sklearn.model_selection.cross_val_score\n",
    "    accuracy = sklearn.model_selection.cross_val_score(\n",
    "        clf, X, y, n_jobs=-1, cv=3).mean()\n",
    "    \n",
    "    return accuracy\n",
    "\n",
    "# Define search space: this will over-ride the suggestions in the objective fnc.\n",
    "search_space = {\n",
    "    \"n_estimators\": [2, 5, 10, 15, 20], \n",
    "    \"max_depth\": [1, 5, 10, 15, 20]}\n",
    "\n",
    "# Set up Optuna study\n",
    "study = optuna.create_study(direction='maximize', \n",
    "                            sampler=optuna.samplers.GridSampler(search_space))\n",
    "\n",
    "# Run optimisation\n",
    "study.optimize(objective, n_trials=100)\n",
    "\n",
    "# Get best model run\n",
    "trial = study.best_trial\n",
    "\n",
    "# Clear optimisation output and display output\n",
    "clear_output(wait=True)\n",
    "print(f'Accuracy: {trial.value:0.3f}')\n",
    "print(f'Best hyperparameters: {trial.params}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig = optuna.visualization.plot_contour(study, params=['n_estimators', 'max_depth'])\n",
    "\n",
    "# To display fig in an orinary norebook use `fig.show`\n",
    "\n",
    "# The following is needed only to display the image in an online Jupyter Book\n",
    "filename = './images/temp.jpg'\n",
    "fig.write_image(filename)\n",
    "display(Image(filename))"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "name": "quickstart.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
